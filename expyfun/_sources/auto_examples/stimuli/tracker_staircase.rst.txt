

.. _sphx_glr_auto_examples_stimuli_tracker_staircase.py:


==============================
Do an adaptive track staircase
==============================

This shows how to make and use an adaptive track using
:class:`expyfun.stimuli.TrackerUD`.

@author: rkmaddox




.. image:: /auto_examples/stimuli/images/sphx_glr_tracker_staircase_001.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    tracker_identify:                       {"tracker_id": 46974157299024, "tracker_type": "TrackerUD"}
    tracker_46974157299024_init:            {"stop_rule": "reversals", "change_criteria": [0, 4], "up": 1, "stop_criterion": 30, "down": 1, "callback": null, "step_size_up": [9, 3], "x_max": Infinity, "x_min": -Infinity, "start_value": 60, "change_rule": "reversals", "step_size_down": [3, 1]}
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         False
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         False
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         False
    tracker_46974157299024_respond:         False
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         False
    tracker_46974157299024_respond:         False
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         False
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         False
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         False
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         False
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         False
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         False
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         False
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         False
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         False
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         False
    tracker_46974157299024_respond:         True
    tracker_46974157299024_respond:         False
    tracker_46974157299024_stop:            {"reversals": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 0, 0, 0, 0, 5, 0, 6, 0, 7, 0, 8, 0, 0, 9, 10, 0, 11, 12, 0, 0, 0, 0, 0, 0, 13, 14, 0, 0, 0, 0, 15, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 18, 0, 19, 20, 0, 0, 0, 0, 21, 22, 23, 24, 0, 25, 26, 0, 27, 28, 29, 30], "x": [60, 57, 54, 51, 48, 45, 42, 39, 36, 33, 30, 27, 36, 33, 42, 41, 40, 39, 38, 37, 36, 39, 42, 41, 40, 43, 46, 45, 44, 43, 46, 45, 44, 47, 46, 45, 44, 43, 42, 41, 40, 43, 42, 41, 40, 39, 38, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 32, 31, 30, 33, 32, 31, 30, 29, 28, 31, 30, 33, 32, 31, 34, 33, 32, 35, 34, 37], "responses": [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 1]}




|


.. code-block:: python


    import numpy as np

    from expyfun.stimuli import TrackerUD
    from expyfun.analyze import sigmoid

    print(__doc__)


    # Make a callback function that prints to the console, rather than log file
    def callback(event_type, value=None, timestamp=None):
        print((str(event_type) + ':').ljust(40) + str(value))


    # Define parameters for modeled human subject (sigmoid probability)
    true_thresh = 35
    slope = 0.1
    chance = 0.5

    # Make a tracker that uses the weighted up-down procedure to find 75%
    tr = TrackerUD(callback, 1, 1, [9, 3], [3, 1], 30, 'reversals', 60, [0, 4])

    # Initialize human state
    rng = np.random.RandomState(1)

    # Do the task until the tracker stops
    while not tr.stopped:
        tr.respond(rng.rand() < sigmoid(tr.x_current - true_thresh,
                                        lower=chance, slope=slope))

    # Plot the results
    fig, ax, lines = tr.plot()
    lines += tr.plot_thresh(4, ax=ax)

    lines[0].set_label('Trials')
    lines[1].set_label('Reversals')
    lines[2].set_label('Estimated threshold')

    ax.legend()
    ax.set_title('Adaptive track of model human (true threshold is {})'
                 .format(true_thresh))

**Total running time of the script:** ( 0 minutes  0.082 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: tracker_staircase.py <tracker_staircase.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: tracker_staircase.ipynb <tracker_staircase.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
