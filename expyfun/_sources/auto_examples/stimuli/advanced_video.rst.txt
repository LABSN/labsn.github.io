

.. _sphx_glr_auto_examples_stimuli_advanced_video.py:


======================
Play sample video file
======================

This shows how to control various properties of a video file in expyfun.

@author: drmccloy




.. image:: /auto_examples/stimuli/images/sphx_glr_advanced_video_001.png
    :align: center


.. rst-class:: sphx-glr-script-out

 Out::

    2017-04-13 20:39:49,759 - INFO    - Expyfun: Setting up Pyglet audio
    2017-04-13 20:39:49,808 - INFO    - Expyfun: Setting up screen
    2017-04-13 20:39:49,820 - EXP     - Expyfun: Set screen visibility True
    2017-04-13 20:39:49,846 - INFO    - Expyfun: Initializing dummy triggering mode
    2017-04-13 20:39:49,849 - INFO    - Expyfun: Initialization complete
    2017-04-13 20:39:49,849 - EXP     - Expyfun: Subject: foo
    2017-04-13 20:39:49,849 - EXP     - Expyfun: Session: foo
    2017-04-13 20:39:49,869 - WARNING - Frame rate could not be determined
    2017-04-13 20:39:52,013 - EXP     - Expyfun: Audio stopped and reset.




|


.. code-block:: python


    import numpy as np
    from expyfun import (ExperimentController, fetch_data_file, building_doc,
                         analyze as ea)

    print(__doc__)


    movie_path = fetch_data_file('video/example-video.mp4')

    ec_args = dict(exp_name='advanced video example', window_size=(720, 480),
                   full_screen=False, participant='foo', session='foo',
                   version='dev', enable_video=True, output_dir=None)
    colors = [x for x in 'rgbcmyk']

    with ExperimentController(**ec_args) as ec:
        screen_period = 1. / ec.estimate_screen_fs()
        all_presses = list()
        ec.load_video(movie_path)
        ec.video.set_scale('fill')
        ec.screen_prompt('press 1 during video to toggle pause.', max_wait=1.)
        ec.listen_presses()  # to catch presses on first pass of while loop
        t_zero = ec.video.play()
        this_sec = 0
        while not ec.video.finished:
            if ec.video.playing:
                fliptime = ec.flip()
            else:  # to catch presses reliably, need delay between loop executions
                ec.wait_secs(screen_period / 5)
            presses = ec.get_presses(live_keys=[1], relative_to=t_zero)
            ec.listen_presses()
            # change the background color every 1 second
            if this_sec != int(ec.video.time):
                this_sec = int(ec.video.time)
                ec.set_background_color(colors[this_sec])
            # shrink the video, then move it rightward
            if ec.video.playing:
                if 1 < ec.video.time < 3:
                    ec.video.set_scale(ec.video.scale * 0.99)
                if 4 < ec.video.time < 5:
                    ec.video.set_pos(ec.video.position + np.array((0.01, 0)))
            # parse button presses
            if len(presses):
                all_presses.extend(presses)
                if len(presses) % 2:  # if even number of presses, do nothing
                    if ec.video.playing:
                        ec.video.set_visible(False)
                        ec.video.pause()
                        ec.screen_text('pause!', color='k', font_size=32,
                                       wrap=False)
                        ec.flip()
                    else:
                        ec.video.set_visible(True)
                        ec.video.play()
            screenshot = ec.screenshot()
            if building_doc:
                break
        ec.delete_video()
        preamble = 'press times:' if len(all_presses) else 'no presses'
        msg = ', '.join(['{0:.3f}'.format(x[1]) for x in all_presses])
        ec.flip()
        ec.screen_prompt('\n'.join([preamble, msg]), max_wait=1.)

    ea.plot_screen(screenshot)

**Total running time of the script:** ( 0 minutes  2.524 seconds)



.. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: advanced_video.py <advanced_video.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: advanced_video.ipynb <advanced_video.ipynb>`

.. rst-class:: sphx-glr-signature

    `Generated by Sphinx-Gallery <http://sphinx-gallery.readthedocs.io>`_
